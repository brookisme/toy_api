Metadata-Version: 2.4
Name: toy_api
Version: 0.0.1
Description-Content-Type: text/markdown
Requires-Dist: flask
Requires-Dist: click
Requires-Dist: pyyaml
Requires-Dist: pyarrow

# Toy API

Configurable test API servers and dummy data generation for testing and development.

## Quick Start

```bash
# Install
pip install toy_api

# Start default API server
toy_api start

# List available configurations
toy_api

# Generate dummy data table
toy_api table db1
```

## Features

- **Configurable APIs**: Define REST endpoints via YAML
- **Dummy Data Generation**: Create realistic test data
- **Multiple Formats**: Parquet, CSV, JSON, LD-JSON
- **Smart Port Management**: Automatic port selection
- **Local Overrides**: Project-level configuration

## Basic Usage

### API Server

```bash
# Start API with default config (port 1234)
toy_api start

# Start with specific config
toy_api start v2

# Start with custom port
toy_api start v3 --port 5000

# Initialize local config directory
toy_api init
```

### Table Generation

```bash
# Generate single table (default: tables/db1.parquet)
toy_api table db1

# Generate with custom destination
toy_api table simple --dest my_data.parquet

# Generate as CSV
toy_api table complex --type csv

# Generate all local tables
toy_api tables

# Overwrite existing files
toy_api table db1 --force
```

## API Configuration

### Simple API (config/v1.yaml)

```yaml
name: my-api
description: Simple test API
port: 1234

routes:
  - path: "/"
    methods: ["GET"]
    response: "api_info"

  - path: "/users"
    methods: ["GET"]
    response: "user_list"

  - path: "/users/<user_id>"
    methods: ["GET"]
    response: "user_detail"
```

### Response Types

Available response generators:
- `api_info` - API metadata
- `user_list` - List of users
- `user_detail` - Single user details
- `user_profile` - User profile
- `user_permissions` - User permissions
- `post_list` - List of posts
- `post_detail` - Single post
- `health_check` - Health status

## Table Configuration

### Simple Table (config/tables/simple.yaml)

```yaml
tables:
  users[5]:
    id: UNIQUE[int]
    name: NAME
    email: str
    location: LOCATION
    active: bool
```

### Full Example (config/tables/db1.yaml)

```yaml
config:
  NB_USERS: 10

shared:
  user_id[[NB_USERS]]: UNIQUE[int]
  region_name: CHOOSE[[Atlanta, San Francisco, New York]][[1]]

tables:
  users[[NB_USERS]]:
    user_id: [[user_id]]
    age: CHOOSE[[21-89]]
    name: NAME
    job: JOB
    nice: bool
    region_name: [[region_name]]

  permissions:
    user_id: [[user_id]]
    permissions: PERMISSIONS[n]

  regions:
    region_name: [[region_name]]
    area: CHOOSE[[1000-9000]]
```

## Advanced Syntax

### Table Generation

#### Data Types

- `str` - Random string
- `int` - Random integer (0-1000)
- `float` - Random float (0-1000)
- `bool` - Random boolean

#### Verbs

**UNIQUE** - Generate unique values

```yaml
id: UNIQUE[int]      # 1000, 1001, 1002, ...
code: UNIQUE[str]    # unique_0000, unique_0001, ...
```

**CHOOSE** - Select from list or range

```yaml
city: CHOOSE[[NYC, LA, SF]]              # Random city
age: CHOOSE[[21-89]]                     # Random age 21-89
tags: CHOOSE[[a, b, c, d]][[2]]         # Exactly 2 tags
items: CHOOSE[[1-100]][[5]]             # 5 random numbers
random: CHOOSE[[x, y, z]][[n]]          # 1-3 items
```

#### Constants

**Singular** (single value):
- `FIRST_NAME`, `LAST_NAME`, `LOCATION`, `PERMISSION`
- `THEME`, `LANGUAGE`, `POST_TAG`, `JOB`

**Plural** (list of values):
- `FIRST_NAMES`, `LAST_NAMES`, `LOCATIONS`, `PERMISSIONS`
- `THEMES`, `LANGUAGES`, `POST_TAGS`, `JOBS`

**With count**:

```yaml
tags: POST_TAGS[3]          # Exactly 3 tags
perms: PERMISSIONS[n]       # 1 to all permissions
```

**Special**:

```yaml
name: NAME                  # Full name (first + last)
names: NAMES                # List of full names
```

#### Shared Data

Share columns across tables:

```yaml
shared:
  user_id[10]: UNIQUE[int]          # Create 10 unique IDs
  regions: CHOOSE[[A, B, C]][[1]]   # Create region list

tables:
  users[10]:
    user_id: [[user_id]]            # Reference shared IDs
    region: [[regions]]             # Reference regions
```

#### Config Variables

Define reusable values:

```yaml
config:
  NB_USERS: 20
  NB_POSTS: 100

shared:
  user_id[[NB_USERS]]: UNIQUE[int]

tables:
  users[[NB_USERS]]:
    user_id: [[user_id]]

  posts[[NB_POSTS]]:
    user_id: [[user_id]]
```

### API Configuration

#### Port Management

```yaml
port: 8000              # Fixed port
# OR omit for auto-selection (8000-9000 range)
```

#### Multiple Methods

```yaml
- path: "/users/<user_id>"
  methods: ["GET", "POST", "PUT"]
  response: "user_detail"
```

#### Custom Responses

Add custom response generators in `response_generator.py`.

## CLI Reference

### Commands

```bash
toy_api                 # List all configs
toy_api init            # Create toy_api_config/ directory
toy_api start [config]  # Start API server
toy_api list            # List all configs
toy_api list --apis     # List only API configs
toy_api list --tables   # List only table configs
toy_api table <config>  # Generate single table
toy_api tables          # Generate all tables
```

### Options

**Start command:**
- `--host <host>` - Bind host (default: 127.0.0.1)
- `--port <port>` - Override config port
- `--debug` - Enable debug mode

**Table command:**
- `--dest <path>` - Output path (default: tables/<name>.parquet)
- `--type <format>` - Format: parquet, csv, json, ld-json
- `--force` - Overwrite existing files
- `--partition <col>` - Partition column (parquet only, repeatable)

**Tables command:**
- `--dest <dir>` - Output directory (default: tables/)
- `--type <format>` - Format for all tables
- `--force` - Overwrite existing files

## Configuration Discovery

### Priority Order

1. **Local configs** - `toy_api_config/*.yaml`
2. **Package configs** - Built-in configurations

### Directory Structure

```
project/
├── toy_api_config/           # Local configs (create with toy_api init)
│   ├── my_api.yaml           # Custom API config
│   └── tables/               # Local table configs
│       └── my_table.yaml
└── tables/                   # Generated tables (default output)
    ├── db1.parquet
    └── simple.csv
```

## Examples

### Complete Workflow

```bash
# 1. Initialize local config
toy_api init

# 2. Create custom table config
cat > toy_api_config/tables/users.yaml << EOF
tables:
  users[10]:
    id: UNIQUE[int]
    name: NAME
    email: str
    age: CHOOSE[[21-65]]
    active: bool
EOF

# 3. Generate table
toy_api table users

# 4. Start API server
toy_api start v2 --port 5000

# 5. Test API
curl http://localhost:5000/users
```

### Integration Testing

```bash
# Generate test data
toy_api table db1 --dest test_data.parquet

# Start test API
toy_api start v3 --port 8080

# Run tests
pytest tests/

# Clean up
rm test_data.parquet
```

## Development

### Adding Response Types

Edit `toy_api/response_generator.py`:

```python
def generate_response(response_type: str, kwargs: Dict, path: str) -> Dict:
    if response_type == "my_custom_response":
        return {
            "custom": "data",
            "path": path
        }
```

### Custom Constants

Edit `toy_api/constants.py`:

```python
MY_CUSTOM_LIST = ["value1", "value2", "value3"]
```

Then use in table configs:

```yaml
tables:
  items:
    value: MY_CUSTOM_LIST
```

## License

CC-BY-4.0
